<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables

// Identification variables
str_alias = "viktor";
str_mood = "angry";

// Animation variables
image_index = 0;
int_imageSpeed = global.int_imageSpeed;

// Walk variables
x = 700;
y = 700;
int_xTarget = x;
int_yTarget = y;
int_movementSpeed = 5;

// Talk variables
str_cloud = "";
int_cloud = noone;

// Idle variables
int_idleMinimum = 150;
int_idleMaximum = 300;
alarm[0] = int_idleMinimum + irandom(int_idleMaximum - int_idleMinimum);

// Interaction variables
str_blocks = "";
str_block[0] = "";
int_blocks = 0;
int_currentBlock = -1;

// Finally, set player action to nothing
scr_setPlayerAction("");


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Parse next interaction block

// Separate options from text and execute them - GIMMICK

// Create a new talking cloud
str_cloudText = str_block[int_currentBlock];
scr_setPlayerAction("talk"); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset player and cursor action to default

// Reinitialise all interaction variables
str_blocks = "";
str_block[0] = "";
int_blocks = 0;
int_currentBlock = -1;

// Delete talking cloud for obj_player, if not yet deleted
with (int_cloud) {
    instance_destroy();
}
int_cloud = noone;

// Restore action to default
scr_setPlayerAction("");

// Restore cursor to default
with (global.int_cursorActionDefault) {
    scr_setCursorAction(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If free and static, start idle action

if ((global.bool_free == true) &amp;&amp; (global.str_action == "")) {
    scr_setPlayerAction("idle");
}
else {
    alarm[0] = int_idleMinimum + irandom(int_idleMaximum - int_idleMinimum);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if close to target, if yes, stop and/or interact
if (global.str_action == "walk") {
    if (point_distance(x, y, int_xTarget, int_yTarget) &lt; int_movementSpeed) {
        speed = 0;
        if ((global.str_actionType == "movement") || ((global.bool_free == true) &amp;&amp; (global.str_actionObject == ""))) {
            scr_setPlayerAction("");
        }
        else {
            scr_setPlayerAction("interact");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interact with object or move to location

// Local variables
var int_object;

if (instance_position(mouse_x,mouse_y,obj_action) == noone) {
    if (global.bool_free = true) {
        int_object = instance_position(mouse_x,mouse_y,obj_object);
        if ((int_object == noone) || ((int_object).bool_available == false)) {
            int_xTarget = mouse_x;
            int_yTarget = mouse_y;
            // Adjust for border
            while(collision_line(x,y,int_xTarget,int_yTarget,obj_border,true,false) != noone) {
                if (x != int_xTarget) {
                    int_yTarget += (abs(y-int_yTarget)/2)/(abs(x-int_xTarget)/2) * sign(y - int_yTarget);
                    int_xTarget += 1 * sign(x - int_xTarget);
                }
                else {
                    int_yTarget += 1 * sign(y - int_yTarget);
                }
            }
            scr_setPlayerAction("walk");
        }
        else {
            // Set global.action variables (item should already be set by obj_item)
            with (global.int_cursorAction) {
                global.str_actionAlias = str_alias;
                global.str_actionType = str_type;
            }
            with (instance_position(mouse_x,mouse_y,obj_object)) {
                global.str_actionObject = str_alias;
            }
            // Depending on action type, set player action
            if (global.str_actionType == "observation") {
                scr_setPlayerAction("interact");
            }
            else {
                with (instance_position(mouse_x,mouse_y,obj_object)) {
                    other.int_xTarget = int_xInteract;
                    other.int_yTarget = int_yInteract;
                }
                scr_setPlayerAction("walk");
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If idle, revert to default

if (global.str_action == "idle") {
    scr_setPlayerAction("");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
